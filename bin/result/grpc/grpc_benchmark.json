# JMH version: 1.21
# VM version: JDK 1.8.0_191, OpenJDK 64-Bit Server VM, 25.191-b12
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.191.b12-1.el7_6.x86_64/jre/bin/java
# VM options: -Xmx1g -Xms1g -XX:MaxDirectMemorySize=1g -XX:+UseG1GC -Dserver.host=120.77.239.199 -Dserver.port=8088 -Dbenchmark.output=jmh.json -Dbenchmark.concurrency=60 -Dbenchmark.warm.up.time=10 -Dbenchmark.warm.up.iterations=3 -Dbenchmark.measurement.iterations=3 -Dbenchmark.measurement.time=10 -Dbenchmark.forks=2
# Warmup: 3 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 60 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.alibaba.benchmark.Client.echoComplexDO

# Run progress: 0.00% complete, ETA 00:06:00
# Fork: 1 of 2
# Warmup Iteration   1: 2.127 ops/ms
# Warmup Iteration   2: 2.046 ops/ms
# Warmup Iteration   3: 2.054 ops/ms
Iteration   1: 2.060 ops/ms
Iteration   2: 2.053 ops/ms
Iteration   3: 2.074 ops/ms

# Run progress: 16.67% complete, ETA 00:05:16
# Fork: 2 of 2
# Warmup Iteration   1: 2.156 ops/ms
# Warmup Iteration   2: 2.042 ops/ms
# Warmup Iteration   3: 2.059 ops/ms
Iteration   1: 2.057 ops/ms
Iteration   2: 2.043 ops/ms
Iteration   3: 2.060 ops/ms


Result "com.alibaba.benchmark.Client.echoComplexDO":
  2.058 ?(99.9%) 0.028 ops/ms [Average]
  (min, avg, max) = (2.043, 2.058, 2.074), stdev = 0.010
  CI (99.9%): [2.030, 2.086] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_191, OpenJDK 64-Bit Server VM, 25.191-b12
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.191.b12-1.el7_6.x86_64/jre/bin/java
# VM options: -Xmx1g -Xms1g -XX:MaxDirectMemorySize=1g -XX:+UseG1GC -Dserver.host=120.77.239.199 -Dserver.port=8088 -Dbenchmark.output=jmh.json -Dbenchmark.concurrency=60 -Dbenchmark.warm.up.time=10 -Dbenchmark.warm.up.iterations=3 -Dbenchmark.measurement.iterations=3 -Dbenchmark.measurement.time=10 -Dbenchmark.forks=2
# Warmup: 3 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 60 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.alibaba.benchmark.Client.echoComplexDO

# Run progress: 33.33% complete, ETA 00:04:13
# Fork: 1 of 2
# Warmup Iteration   1: 27.612 ?(99.9%) 0.309 ms/op
# Warmup Iteration   2: 28.958 ?(99.9%) 0.180 ms/op
# Warmup Iteration   3: 29.234 ?(99.9%) 0.173 ms/op
Iteration   1: 29.273 ?(99.9%) 0.238 ms/op
Iteration   2: 29.244 ?(99.9%) 0.164 ms/op
Iteration   3: 29.132 ?(99.9%) 0.177 ms/op

# Run progress: 50.00% complete, ETA 00:03:09
# Fork: 2 of 2
# Warmup Iteration   1: 27.851 ?(99.9%) 0.545 ms/op
# Warmup Iteration   2: 29.171 ?(99.9%) 0.165 ms/op
# Warmup Iteration   3: 29.067 ?(99.9%) 0.243 ms/op
Iteration   1: 29.438 ?(99.9%) 0.214 ms/op
Iteration   2: 29.453 ?(99.9%) 0.146 ms/op
Iteration   3: 29.197 ?(99.9%) 0.240 ms/op


Result "com.alibaba.benchmark.Client.echoComplexDO":
  29.289 ?(99.9%) 0.364 ms/op [Average]
  (min, avg, max) = (29.132, 29.289, 29.453), stdev = 0.130
  CI (99.9%): [28.925, 29.654] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_191, OpenJDK 64-Bit Server VM, 25.191-b12
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.191.b12-1.el7_6.x86_64/jre/bin/java
# VM options: -Xmx1g -Xms1g -XX:MaxDirectMemorySize=1g -XX:+UseG1GC -Dserver.host=120.77.239.199 -Dserver.port=8088 -Dbenchmark.output=jmh.json -Dbenchmark.concurrency=60 -Dbenchmark.warm.up.time=10 -Dbenchmark.warm.up.iterations=3 -Dbenchmark.measurement.iterations=3 -Dbenchmark.measurement.time=10 -Dbenchmark.forks=2
# Warmup: 3 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 60 threads, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: com.alibaba.benchmark.Client.echoComplexDO

# Run progress: 66.67% complete, ETA 00:02:06
# Fork: 1 of 2
# Warmup Iteration   1: 27.656 ?(99.9%) 1.445 ms/op
# Warmup Iteration   2: 28.551 ?(99.9%) 1.575 ms/op
# Warmup Iteration   3: 29.066 ?(99.9%) 1.609 ms/op
Iteration   1: 29.026 ?(99.9%) 1.583 ms/op
                 echoComplexDO?p0.00:   0.966 ms/op
                 echoComplexDO?p0.50:   1.759 ms/op
                 echoComplexDO?p0.90:   201.589 ms/op
                 echoComplexDO?p0.95:   202.375 ms/op
                 echoComplexDO?p0.99:   213.626 ms/op
                 echoComplexDO?p0.999:  221.512 ms/op
                 echoComplexDO?p0.9999: 222.804 ms/op
                 echoComplexDO?p1.00:   223.085 ms/op

Iteration   2: 28.976 ?(99.9%) 1.591 ms/op
                 echoComplexDO?p0.00:   0.752 ms/op
                 echoComplexDO?p0.50:   1.794 ms/op
                 echoComplexDO?p0.90:   201.851 ms/op
                 echoComplexDO?p0.95:   211.812 ms/op
                 echoComplexDO?p0.99:   215.220 ms/op
                 echoComplexDO?p0.999:  222.560 ms/op
                 echoComplexDO?p0.9999: 222.822 ms/op
                 echoComplexDO?p1.00:   223.085 ms/op

Iteration   3: 28.965 ?(99.9%) 1.578 ms/op
                 echoComplexDO?p0.00:   0.772 ms/op
                 echoComplexDO?p0.50:   1.739 ms/op
                 echoComplexDO?p0.90:   201.851 ms/op
                 echoComplexDO?p0.95:   211.812 ms/op
                 echoComplexDO?p0.99:   220.987 ms/op
                 echoComplexDO?p0.999:  222.036 ms/op
                 echoComplexDO?p0.9999: 224.606 ms/op
                 echoComplexDO?p1.00:   224.657 ms/op


# Run progress: 83.33% complete, ETA 00:01:03
# Fork: 2 of 2
# Warmup Iteration   1: 27.784 ?(99.9%) 1.488 ms/op
# Warmup Iteration   2: 28.436 ?(99.9%) 1.535 ms/op
# Warmup Iteration   3: 29.318 ?(99.9%) 1.628 ms/op
Iteration   1: 29.010 ?(99.9%) 1.578 ms/op
                 echoComplexDO?p0.00:   1.029 ms/op
                 echoComplexDO?p0.50:   1.835 ms/op
                 echoComplexDO?p0.90:   201.851 ms/op
                 echoComplexDO?p0.95:   203.948 ms/op
                 echoComplexDO?p0.99:   213.123 ms/op
                 echoComplexDO?p0.999:  221.774 ms/op
                 echoComplexDO?p0.9999: 222.776 ms/op
                 echoComplexDO?p1.00:   223.085 ms/op

Iteration   2: 29.103 ?(99.9%) 1.581 ms/op
                 echoComplexDO?p0.00:   0.999 ms/op
                 echoComplexDO?p0.50:   1.839 ms/op
                 echoComplexDO?p0.90:   201.589 ms/op
                 echoComplexDO?p0.95:   202.677 ms/op
                 echoComplexDO?p0.99:   221.250 ms/op
                 echoComplexDO?p0.999:  222.036 ms/op
                 echoComplexDO?p0.9999: 223.063 ms/op
                 echoComplexDO?p1.00:   223.085 ms/op

Iteration   3: 28.995 ?(99.9%) 1.580 ms/op
                 echoComplexDO?p0.00:   0.936 ms/op
                 echoComplexDO?p0.50:   1.806 ms/op
                 echoComplexDO?p0.90:   201.851 ms/op
                 echoComplexDO?p0.95:   211.812 ms/op
                 echoComplexDO?p0.99:   213.385 ms/op
                 echoComplexDO?p0.999:  221.512 ms/op
                 echoComplexDO?p0.9999: 222.274 ms/op
                 echoComplexDO?p1.00:   222.298 ms/op



Result "com.alibaba.benchmark.Client.echoComplexDO":
  N = 124873
  mean =     29.012 ?(99.9%) 0.646 ms/op

  Histogram, ms/op:
    [  0.000,  25.000) = 108372 
    [ 25.000,  50.000) = 0 
    [ 50.000,  75.000) = 0 
    [ 75.000, 100.000) = 0 
    [100.000, 125.000) = 0 
    [125.000, 150.000) = 0 
    [150.000, 175.000) = 0 
    [175.000, 200.000) = 3 
    [200.000, 225.000) = 16498 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =      0.752 ms/op
     p(50.0000) =      1.796 ms/op
     p(90.0000) =    201.851 ms/op
     p(95.0000) =    203.765 ms/op
     p(99.0000) =    216.599 ms/op
     p(99.9000) =    222.036 ms/op
     p(99.9900) =    222.822 ms/op
     p(99.9990) =    224.657 ms/op
     p(99.9999) =    224.657 ms/op
    p(100.0000) =    224.657 ms/op


# Run complete. Total time: 00:06:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode     Cnt    Score   Error   Units
Client.echoComplexDO                         thrpt       6    2.058 ? 0.028  ops/ms
Client.echoComplexDO                          avgt       6   29.289 ? 0.364   ms/op
Client.echoComplexDO                        sample  124873   29.012 ? 0.646   ms/op
Client.echoComplexDO:echoComplexDO?p0.00    sample            0.752           ms/op
Client.echoComplexDO:echoComplexDO?p0.50    sample            1.796           ms/op
Client.echoComplexDO:echoComplexDO?p0.90    sample          201.851           ms/op
Client.echoComplexDO:echoComplexDO?p0.95    sample          203.765           ms/op
Client.echoComplexDO:echoComplexDO?p0.99    sample          216.599           ms/op
Client.echoComplexDO:echoComplexDO?p0.999   sample          222.036           ms/op
Client.echoComplexDO:echoComplexDO?p0.9999  sample          222.822           ms/op
Client.echoComplexDO:echoComplexDO?p1.00    sample          224.657           ms/op
